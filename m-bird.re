= エンジニアのためのDNS（再）入門（初級者編）
#@# タイトルどうするか？

== はじめに

「インフラ屋にはなるな。とくに、メールとDNSには手を出すな」。
そう言い遺し、社会という名の地獄巡りへと旅立っていた諸先輩方。
そんな遺言を守ることなく、道を踏み外してしまったインフラ系@<fn>{infra-engineer}エンジニア、えむばーど(@m_bird)です。

//footnote[infra-engineer][飲酒してフラフラのエンジニアの意。]

そんな「無くてはならないけれど、なんだか面倒」というイメージの強いDNS。「知っている」つもりになってはいるけれど、意外と理解できていない……そんな声がときどき聞かれます。

本誌の記事は、そんな方々へ向けたものです。
DNS関連の話題に付いていくための基礎知識を得ることを目標とし、DNSの入門からお話を始めます。そして、続く@kdmnの特集にて、DNS関連の話題へ付いていくための必須の知識「ゾーンと委任」について、掘り下げます。

== DNSって、なに？

//image[m-bird_dns01][DNSってなんだろう？][scale=0.6]

DNS、ドメインネームシステム。たった一つの「ドメイン名空間」を成し、この名前空間を利用してドメイン名から情報を取得する「名前解決」をおこなうことができる仕組みです。
このシステムは、いくつかの要素から成り立っています。ドメイン名空間、それを表現するDNSサーバー、その仕組みを使ってドメイン名から情報を取得するDNSサーバー……。

私たちが利用したり、管理したりする「DNSサーバー」は、このシステムを構築したり利用したりする要素のひとつです。
では、これらの要素の役割について、一つずつみてゆきましょう。

== ドメイン名空間
ドメイン名空間は、たった一つの存在です。
世界中誰もが、ただ一つの名前空間を利用するため、同じドメイン名であれば同じサイト、同じ相手にメールが届きます。

このドメイン名空間を保つには、一つの組織が管理するのが手っ取り早いです。
そして、かつては実際にそうしていました。しかし、その運用は破綻します。そうして考案されたのが、名前空間を分散管理する仕組み、@<kw>{DNS}です。

現在運用されているドメイン名空間は、分散管理を実現するために、ツリー構造を成しています。
ルート(.)を頂点として、枝分かれする形をとります。そして、それぞれの階層ごとに管理を別組織に任せることを可能としています。
このことを@<kw>{委任}と呼び、分散システムであるDNSの、重要なポイントです。

//image[m-bird_domname-space][ドメイン名空間][scale=0.45]

=== ドメイン名とDNS
ドメイン名は、ドメイン名空間のツリー構造を表現するための工夫が凝らされています。
そして、基本的にドメイン名空間の階層構造と一致する形となっています。

ドメイン名は、ドットと文字列から構成されており、ドットで区切られた部分を「ラベル」と呼びます。
このラベルの切れ目で、他のサーバーに管理権限を委任することができるようになっています。

ドメイン名は、右から順にトップレベルドメイン、セカンドレベルドメイン、サードレベルドメイン……と呼ばれ、
右に行くほど親側（委任する側）、左に行くほど子側（委任される側）となります。

例として、@<code>{www.example.jp}をみてみましょう。
この場合、@<code>{jp}がトップレベルドメイン名、@<code>{example}がセカンドレベルドメイン名、
@<code>{www}がサードレベルドメイン名です。
また、@<code>{jp}と@<code>{example}の区切り、@<code>{example}と@<code>{www}の区切りで委任可能です。

//image[m-bird_domain-name][ドメイン名の構造][scale=1.0]

#@# memo
#@# * ツリー構造
#@# * 階層構造と一致するような形になっている
#@# * 例: www.example.com
#@# * 「.」で区切られたラベルで構成される
#@# * ラベルの切れ目で、他のサーバーに委任することができる
#@# ** 右に行くほど親側（委任する側）、左に行くほど子側（委任される側）
#@# ** 委任すると、そこから先は委任先で自由に管理できる

== 名前解決と2つのDNSサーバー

#@# ドメイン名とそれに対応する情報（IPアドレスなど）からなる『ドメイン名空間』

では、「ドメイン名システム」の全体概要図を示した図を眺めてみましょう。
ドメイン名システムは、ドメイン名とそれに対応するIPアドレスなどの情報から成る「ドメイン名空間」と、そのドメイン名空間を構成する「権威DNSサーバー」、そしてドメイン名の名前解決を行う「フルリゾルバー」などの要素から成り立っています。

//image[m-bird_dns-all][ドメイン名システム(DNS)全体概要]
#@# TODO 名前解決、という言葉が幾度か出てくるが、もう少し厳密に定義する？

@<img>{m-bird_dns-all} を参考にしながら、DNSを用いた名前解決の大まかな流れを見てみましょう。

 1.  @<comment>{textlint-disable} Webブラウザ @<comment>{textlint-enable} はWebサーバーにアクセスするために、ドメイン名からIPアドレスを検索する「名前解決」を行います。
    これは、OSが提供する機能@<fn>{getaddrinfo}を利用しておこなわれます。
 2. OSは「フルリゾルバー」に問い合わせを行います。
    @<br>{}ただし、hostsファイルに該当するドメイン名がある場合、hostsファイルの中身を返します。DNSサーバーには問い合わせを行いません。
 3. フルリゾルバーは、「権威DNSサーバー」に問い合わせを行い、名前解決を実施します。
 4. 以降、逆順を辿って結果がOSに返されます。

この流れを頭の片隅に置きつつ、それぞれの要素を見ていきましょう。

//footnote[getaddrinfo][具体的には、@<code>{getaddrinfo()}など。libcが提供しています。]

===[column] 「DNSはIPアドレスを引くもの」？

ドメイン名とDNSについて尋ねてみると、「名前とIPアドレスを結びつけるもの」という回答がよく返ってきます。人が覚えづらいIPアドレスを、人が覚えやすいドメイン名に対応づけるのだ、と。

だいたいあっています。よく利用される用途としては、IPアドレスとドメイン名の結びつけに利用されることが多いです。しかし、他の用途もあります。具体的なものとしては、ドメイン名に任意のテキスト情報をドメイン名と結びつけることのできる、@<kw>{TXTレコード}の存在があります。

なお、TXTレコードは、メールの送信元なりすましを検知することができる仕組み@<kw>{SPF}(Sender Policy Framework)などに用いられています。

===[/column]

=== 階層を「成す」DNSサーバー
君作る人、僕使う人。まずは、ドメイン名の階層構造を成す側からみてみましょう。
その役割を担うのは「権威DNSサーバー」と呼ばれるDNSサーバーです。
また、人によっては「コンテンツサーバー」と表現することもあります。

ドメイン名を登録したのち、ドメイン名の設定をDNSサーバーに設定しましょう、と案内されます。
そのときに設定するDNSサーバーが、こちらの権威DNSサーバーとなります。

権威DNSサーバーは、頂点となる、ルートサーバーからドメイン名空間の一部の管理権限を@<kw>{委任}され、そのドメイン名空間の管理を行います。
例えば、ドメイン名空間の@<code>{.net}部分については@<code>{.net}の権威DNSサーバー、ドメイン名空間の@<code>{.jp}部分については@<code>{.jp}の権威DNSサーバー……といったような形です。
そして、それぞれの権威DNSサーバーは、さらに部分的にドメイン名空間を切り出して、その管理を委任します。
.netのドメイン名を登録したときは、.netの権威DNSサーバーに情報@<fn>{dom-registry}を登録することになります。

//footnote[dom-registry][ドメイン名を登録し、実際に利用をするためには、自分のドメイン名の情報を管理させる権威DNSサーバーを用意し、上位の権威DNSサーバーに登録する必要があります。]

このような仕組みにより、ドメイン名空間の階層構造を表現し、分散管理を実現しています。
なお、この権威DNSサーバーが管理する単位を@<kw>{ゾーン}と呼んだりするのですが、この辺りのお話については、次章の中級編にて。

=== 階層を「利用する」DNSサーバー
続いて、階層を利用する側を見てみましょう。
その名も「フルリゾルバー」。こちらも別名で呼ばれることがあり、「キャッシュDNSサーバー」と表現されることがあります。
#@#このDNSサーバーの役割は、@<strong>{ドメイン名空間の階層構造を利用して名前解決を実施する}ことです。

皆さんがお手元で直接利用するPCで、「DNSの設定をする」際に設定しているのはこのサーバーのことを指しています。
Windowsであれば「優先DNSサーバー」「代替DNSサーバー」、Macだと「DNSサーバー」という設定項目となっています。
FreeBSDやLinuxといった @<comment>{textlint-disable} Unix系OS @<comment>{textlint-enable} では、@<code>{/etc/resolv.conf}に設定している内容です。
Google の提供するPublic DNSサーバーを利用し、@<code>{8.8.8.8}や@<code>{8.8.4.4}を設定している人もいるかもしれません。

//image[m-bird_full-resolver][フルリゾルバー][scale=0.7]

また、フルリゾルバーは名前解決した結果をキャッシュする機能もあります。
これにより、実行コストの高い「ドメイン名の階層をルートからたどる名前解決」を何度も実行することを回避しています。人気なドメインであればキャッシュに乗りやすく、応答を高速に返すことが可能になります。
このような特性より、フルリゾルバーは多くのユーザが共用すると、キャッシュの効率が良くなるため、ISPや会社組織単位などで運用が行われている場合が多いです。

//image[m-bird_full-resolver_cache_exists][フルリゾルバーのキャッシュ][scale=0.75]

では、フルリゾルバーはどのように処理を行い、フルリゾルバーのユーザに応答を返しているのでしょうか。
@<code>{www.example.jp}を例に、フルリゾルバーがドメイン名からホストのIPアドレスを取得する例をみてみましょう。

==== キャッシュが「ない」場合

まずは、キャッシュがなにもないドメイン名の問い合わせがあった場合を見てみましょう。
フルリゾルバーは、問い合わせを受けた際、キャッシュに情報があるかどうかを確認します。
そして、キャッシュにないことが分かると、ドメイン名空間を利用した名前解決……
つまり、実際にはドメイン名空間の階層構造を成す権威DNSサーバーを用いた、名前解決を開始します。

 1. フルリゾルバーは、まずルートサーバーに対して、問い合わせを行います。
 2. ルートサーバーは、「@<code>{.jp}の権威DNSサーバーに聞いてよ」と返します。
 3. フルリゾルバーは、@<code>{.jp}の権威DNSサーバーに問い合わせをします。
 4. @<code>{.jp}の権威DNSサーバーは、「@<code>{example.jp}の権威DNSサーバーに聞いてよ」と返します。
 5. @<code>{example.jp}の権威DNSサーバーは、「知ってるで、@<code>{www.example.jp}は@<code>{203.0.113.63}やで」と返します。

「え？ フルリゾルバーはどうやってルートサーバーを知るの？」という疑問を持たれた方。@<strong>{鋭い}。
フルリゾルバーは、@<kw>{ルートヒント}@<fn>{roothint}と呼ばれる情報をあらかじめ持っているため、この情報に基づいて問い合わせを行います。

//footnote[roothint][ルートヒントについては、中級編にてもう少し踏み込んだお話をします。]

//image[m-bird_fullresolver_iterative_full][キャッシュが無い場合のフルリゾルバーの名前解決][scale=1.0]

==== キャッシュが「ある」場合

続いて、キャッシュがある場合を見てみましょう。
キャッシュがある場合……と言っても、フルリゾルバーに問い合わせたドメイン名がそのままキャッシュに乗っている場合は、
@<img>{m-bird_full-resolver_cache_exists}のように、そのまま返答を返すだけになります。
これではあまり面白くはありませんので、次のようなケースを見てみましょう。

 * @<code>{www.example.jp}というドメイン名の名前解決
 * @<code>{example.jp}まではキャッシュに乗っている
 * @<code>{www.example.jp}はキャッシュに乗っていない

この場合、フルリゾルバーは@<code>{example.jp}の権威DNSサーバーのアドレスを知っています。
このため、いきなり @<code>{example.jp}の権威DNSサーバーに問い合わせを行い、その結果を得るという、
たったの2ステップで完結するようになります。

 1. @<code>{example.jp}に問い合わせを行います。
 2. @<code>{example.jp}の権威DNSサーバーは、「知ってるで、@<code>{www.example.jp}は@<code>{203.0.113.63}やで」と返します。

//image[m-bird_fullresolver_iterative_part][部分的にキャッシュがある場合のフルリゾルバーの名前解決][scale=1.0]


このように非常に効果的なキャッシュ。
しかし、キャッシュが残り続けてしまうと、権威DNSサーバーの設定が変わったとしても、古い設定がフルリゾルバーに
残り続けてしまうことになってしまいます。
このために導入されているのが、Time To Live、略して@<kw>{TTL}です。これは、「どのくらいまでの期間なら情報をキャッシュを利用していてもいいよ」というパラメータです。TTLを過ぎると、キャッシュは破棄され、次の問い合わせで権威DNSサーバーに再度情報を取得しにゆきます。

===[column] 「ネガティブ」なキャッシュ？

効率的に名前解決を行うためのキャッシュ。
実はこれ、名前解決をした結果だけでなく、対象が存在しない場合の「不在応答」もキャッシュします。

このキャッシュは「ネガティブキャッシュ」と呼ばれ、通常応答と同様に、TTLが切れるまでそのキャッシュを保持し続けます。
なので、権威DNSサーバーの設定変更をする際にフルリゾルバー経由で確認を実施していると、ネガティブキャッシュができてしまい、
「設定変更したはずなのに、おかしいな？」と首を傾げることがあります。

===[/column]

== 発展編
さて、ここまで読まれた方々に向けて、少し実運用側に踏み込んだお話をご紹介したいと思います。
DNSに触れていると、遅かれ早かれ耳にする2つの話題です。

=== 権威とフルリゾルバーの同居とオープンリゾルバー問題
本章では、権威DNSサーバーとフルリゾルバーと、2つの役割のDNSサーバーが存在していることをご説明しました。
しかし、一部ではフルリゾルバーとしても権威DNSサーバーとしても振る舞うように設定している環境が
存在しています。これは「兼用」や「同居」と呼ばれています。

これは、DNSサーバーの実装の一つである、BINDがそのような設定が可能であったからでしょう。
また、権威DNSサーバーとしてもフルリゾルバーとしても、さほどクエリが無い場合には、兼用してしまった方がコストが低く抑えることができます。
昔は、仮想化技術なども普及していませんでしたし、仮想化もコストがゼロな訳ではありません。管理コストもありますし。

しかし、このような運用だと、いくつかの問題が出てきます。
例えば、サーバーの引っ越しの際。権威DNSサーバー、フルリゾルバー、引っ越しを行う際、
どちらもただでさえ厄介で考慮しなければならないのに、考慮する要素が増えてしまい大変なことになってしまいます。

また、@<kw>{DNSリフレクション攻撃}(DNSアンプ攻撃)と呼ばれる攻撃の加害者側として参加させられてしまう
問題があります。
DNSリフレクション攻撃は、@<kw>{オープンリゾルバー}と呼ばれる、インターネットのどこからでも問い合わせに
応答する設定になっているフルリゾルバーを用いて行われます。

これは、DNSの次のような特性を利用した攻撃です。

 1. 小さなリクエストを投げると大きなレスポンスを得られる非対称性
 2. 送信元アドレスの詐称が可能(UDPを用いているため)

フルリゾルバーを、あたかもリフレクターのように用いて増幅し、小さな力で大きな力を得て
相手先を効率良く攻撃することが可能な手法です。
DNSだけでなく、同様な手法でNTPなどを用いた攻撃も観測されています。

//image[m-bird_dns-reflection][DNSリフレクション攻撃概要図][scale=0.65]

現在はフルリゾルバーは、会社や学校内部、といった特定組織のLANの中だけで閉じるようにし、インターネット側からの問い合わせには応えないようにするのが一般的な運用です。
これは、家庭用ルーターも同様です@<fn>{home-router}。

//footnote[home-router][実際のところ、インターネット側からの問い合わせに応えてしまう家庭用ルーターは存在していて、問題になっています。]

さて、権威DNSサーバーとフルリゾルバーを共用していると、なぜこの攻撃の加害者、つまり
オープンリゾルバーとなってしまうのでしょうか？
権威DNSサーバーは、外部（インターネット側）からの問い合わせに応える必要があり、外部からの問い合わせに
応える設定になっています。
権威DNSサーバーを同じサーバーで兼用していると、フルリゾルバーとしての機能もおのずとインターネット側からの
問い合わせに応えるような設定になってしまい、結果としてオープンリゾルバーとなってしまいます。

無論、設定を詰めていけば兼用していてもオープンリゾルバーを回避することは可能です。
しかし、そのようなコストを掛けるよりは、素直に分離した方が良いと言えるでしょう。

=== 浸透問題
「@<strong>{浸透いうな}」という言葉を耳にしたことがある方もいらっしゃるでしょう。
これは、権威DNSサーバーの設定を変更したにも関わらず、各地にあるフルリゾルバー経由で名前解決を行うと、
その設定変更の反映がなされていない現象を指すらしいです。

検索してみると、次のような文章が出てきます。
「権威DNSサーバーに対して、ドメイン名の設定変更を行っても、1日から3日間設定が反映されません。これは浸透期間とも呼ばれます」
どうやらフルリゾルバーが、権威DNSサーバーの設定変更前の情報をしばらくキャッシュし続けてしまうことを指す模様です。

さて、この表現に違和感はありませんでしょうか。
この表現は、まるで権威DNSサーバー側から、じわじわと設定を拡げていくようなイメージです。
しかし、実際には違います。ここまで説明したとおり、フルリゾルバーがキャッシュしてよい期間は、
権威DNSサーバーにて明示的に設定します。
それが切れると、フルリゾルバー側は権威DNSサーバーに再度問い合わせを行います。
なので、「浸透」という言葉が想起させるような動作ではありません。

つまり、「浸透いうな」という言葉の意図は、「DNSの動きの理解出来ない部分を、便利な言葉で覆い隠すな。間違った運用や足りない理解の体の良い言い訳に使うな」ということでしょう。
「人事を尽くして浸透を待つ」と嘯くまえに、やれることやったんかい？と。

ただ、ドメイン名を管理し権威DNSサーバーを運用している最中、思うような挙動にならないことがあります。
例えば、権威DNSサーバーの引っ越しの際などは、きちんと準備をしないと古い権威DNSサーバーに問い合わせが
来続けてしまったりします。

昔からある仕組みで、身近な割に少々複雑なプロトコルなDNS。
運用する以上、その仕組みについて真摯に向き合って対応を進めていく必要があるでしょう。

== まとめ
本章では、ドメイン名システムの全体概要の理解として、ドメイン名空間と2つの役割のDNSサーバーについてみてきました。
権威DNSサーバー、こちらはドメイン名空間の階層構造を表現し、フルリゾルバーは権威DNSサーバーが成す階層構造を利用して、
名前解決を行います。
また、名前解決の際に得られた結果をキャッシュし、一定期間再利用します。

エンドユーザのPCは、フルリゾルバーのIPアドレスが設定されており、フルリゾルバーに名前解決を依頼し、その結果を受け取ります。
通常、直接は権威DNSサーバーを利用しません。

ここまで理解していただければ、初級者は脱したといって良いでしょう。
それでは、引きつづき中級者編をお楽しみください。

===[column] DNSサーバーに優先度はない？

良く尋ねられるものとして、「DNSサーバーの優先度の設定方法」がありますが、 そんなものは、ありません。

まずは、権威DNSサーバーについて。権威DNSサーバーの優先度はどれも一律で、問い合わせの優先度付けを制御することはできません。
ドメイン名に複数台の権威DNSサーバーの設定をした場合、どの権威DNSもまんべんなく問い合わせが来るかたちになります。

誤解を招く理由の一つは、プライマリサーバー（マスタサーバ）や、セカンダリサーバ（スレーブサーバ）という言葉が、権威DNSサーバーの用語の中に存在することです。
これは、権威DNSサーバーを管理をする際の用語です。複数台の権威DNSサーバーを運用し、権威DNSサーバーのゾーン情報を更新する場合に、複数台の権威DNSサーバーのゾーン情報を個別に直接変更するのは骨が折れます。

このため、1台の権威DNSサーバーの情報を変更し、残りの権威DNSサーバーにその設定を転送する（ゾーン転送）という技術が存在します。このときに、転送元のサーバーをプライマリサーバー、転送先のサーバーをセカンダリサーバーと呼びます。

なので、「プライマリサーバーは最初に問い合わせる先、セカンダリサーバーはプライマリサーバーが応答しない場合に次に問い合わせる先」という意味ではありませんし、そういう制御は不可能です。

フルリゾルバーについても同様に、クライアントからの問い合わせ優先度を制御することはできません。
DNSの利用側であるOS側で複数フルリゾルバーの設定を行い、その優先度を付けることは可能です。しかし、それはDNSの機能ではなく、DNSを利用するクライアント側の機能です。

===[/column]

