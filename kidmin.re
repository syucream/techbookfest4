= エンジニアのためのDNS（再）入門（中級者編）
#@# タイトル仮

== TEDみたいな前口上


== ゾーン

初級編で、ドメイン名空間について説明しました。
ドメイン名空間は、各ノードにラベルを持つツリー構造になっています。

 * ドメイン名空間の一部
 ** サブツリーを構成するレコードのまとまり


== ルートゾーン

@<kw>{ルートゾーン, root zone} とは、ドメイン名空間を構成するツリーの根（root）となるゾーンです。
本稿執筆時点のドメイン名空間は、ルートゾーンを根として持ち、その子孫であるたくさんのゾーンから構成されています。

ルートゾーンの管理に関するポリシーの策定は @<kw>{ICANN, Internet Corporation for Assigned Names and Numbers} によって行われています。実際の運用は @<kw>{IANA機能運用者, IANA Functions Operator} として選ばれた @<kw>{PTI, Public Technical Identifiers} が行っています。

ルートゾーンをサービスする権威DNSサーバー（本稿執筆時点では @<tt>{*.root-servers.net} ）のことを、 @<kw>{ルートサーバー, root server} または @<kw>{ルートDNSサーバー} と呼びます。

全てのフルリゾルバーは、ルートDNSサーバーについての情報を持っています。
具体的には、 @<kw>{ルートヒント, root hints} と呼ばれる下記の情報を持っています。これらは、ルートゾーン自身にも含まれています。

 * ルートゾーンのNSレコード
 ** つまり、ルートDNSサーバーのホスト名
 * 上記ホストのAレコードおよびAAAAレコード
 ** つまり、ルートDNSサーバーのIPv4・IPv6アドレス

このルートヒントを使って、フルリゾルバーはドメイン名空間のツリーをルートからたどって、名前解決を行っています。
最新のルートヒントの情報は、 @<tt>{https://www.iana.org/domains/root/files} にて公開されています。

なお、ルートヒントの情報を直接使うのではなく、最新の情報を使うために、ルートゾーンに含まれるルートヒント情報を取得し直す実装もあります。この取り直す動作のことを、 @<kw>{プライミング, priming} と呼びます。

たまに、comゾーンを持つ権威DNSサーバー（本稿執筆時点では @<tt>{*.gtld-servers.net} ）のことを「comのルート」と呼ぶ人もいます。しかし前述の通り、DNS名前空間は1つのツリーからなっているので、「ルート」とはその頂点を指すことになります。このため、それ以外の部分をルートと呼ぶことはふさわしくありません。


== 委任

ドメイン名空間はルートゾーンを根とするツリー構造であると説明しました。
ルートゾーンに @<tt>{www.sub.example.com} のような情報を直接登録することも技術的には可能なのですが、本稿執筆時点のポリシーではそうなっていません。

サブツリーの運用を別の組織に委ねることで行っています。これを、 @<kw>{委任, delegation} と呼びます。

 * 委任先のNSレコード
 ** つまり、委任先の情報を持つ権威DNSサーバーのホスト名
 * 上記のAレコードおよびAAAAレコード（ @<kw>{グルー, glue} と呼ぶ）
 ** つまり、委任先の権威DNSサーバーのIPv4・IPv6アドレス（必要な場合のみ）

@<tt>{example.com} ゾーンから @<tt>{sub.example.com} ゾーンを切り出す場合の例について説明します。
@<tt>{sub.example.com} ゾーンを持つ権威DNSサーバーとして、 @<tt>{ns1.sub.example.com} と @<tt>{ns2.example.net} の2つを指定しています。

//list[DelegationExampleParentSide][example.comゾーン（委任する側）]{
sub.example.com.      IN  NS   ns1.sub.example.com.
sub.example.com.      IN  NS   ns2.example.net.
ns1.sub.example.com.  IN  A    192.0.2.53
ns1.sub.example.com.  IN  AAAA 2001:db8:beef::1:53
//}
//list[DelegationExampleChildSide][sub.example.comゾーン（委任される側）]{
sub.example.com.      IN  SOA  ...                   ;; ゾーンの頂点に必要な情報
sub.example.com.      IN  NS   ns1.sub.example.com.
sub.example.com.      IN  NS   ns2.example.net.
ns1.sub.example.com.  IN  A    192.0.2.53
ns1.sub.example.com.  IN  AAAA 2001:db8:beef::1:53
//}


== グルー



== よくある誤解

=== 「 @<tt>{.} 」の切れ目が必ず委任を表してはいないことに注意
 * 例: @<tt>{www.state.ca.us}
 * @<tt>{ca.us} というゾーンは存在していない
 * @<tt>{us} というゾーンに、@<tt>{state.ca.us} のレコード（委任だけ）が書いてある

=== ある名前に結びつくリソースレコードが1つもないこともある
 * @<tt>{example.com} ゾーンの中で、
    @<tt>{www.sub.example.com} という名前を持つリソースレコードが存在しているが、
    @<tt>{sub.example.com} という名前を持つリソースレコードが存在していないケース
 * これが @<kw>{ENT, Empty Non-Terminal}


== 逆引き

この節では、IPv4アドレス・IPv6アドレスからドメイン名を検索する操作である @<kw>{逆引き, reverse lookup} について説明します。

ここまで説明してきたように、ドメイン名空間は管理者の異なる複数のゾーンから構成されています。このため、あるIPアドレスに対応するドメイン名を検索しようとすると、すべてのゾーンからIPアドレスを洗い出すことになります。これは現実的ではありません。

このため、（IPアドレスをドメイン名としてドメイン名空間にマップ、PTR検索する）

 * @<tt>{A} レコードや @<tt>{AAAA} レコードとして登録されている情報を直接参照しているわけではない
 * IPアドレスをドメイン名にマップして、その名前の @<tt>{PTR} レコードを参照している
 ** 逆引きに関するDNSでの約束
 ** ドメイン名空間にあるドメイン名からレコードを検索するという操作は正引きと同じ
 * 仕組み上、 @<tt>{A} レコードや @<tt>{AAAA} レコードと対応付けられているわけではない
 ** 何でも書ける
 ** IPアドレス管理者の自己申告に近いが、でたらめなことを書いてもいいことがないので普通やらない
 * IPv4
 ** 1octetずつ逆にして10進数表記してラベル4個を構成し、最後に @<tt>{in-addr.arpa} を付ける
 ** 例:  @<tt>{203.0.113.4} → @<tt>{4.113.0.203.in-addr.arpa}
 ** @<b>{発展課題} prefixが/24より長いCIDRブロックの逆引き
 * IPv6
 ** 4bitずつ逆にして16進数表記してラベル32個を構成し、最後に @<tt>{ip6.arpa} を付ける
 ** 例:  @<tt>{2001:db8:beef:feed:0123:4567:89ab:cdef} → @<tt>{f.e.d.c.b.a.9.8.7.6.5.4.3.2.1.0.d.e.e.f.f.e.e.b.8.b.d.0.1.0.0.2.ip6.arpa}
 ** 昔は @<tt>{ip6.int} というゾーンも使われていたが廃止済; 本に書いてあったら投げ捨ててよい


== DNSのめんどくさいものたち

=== ワイルドカード

=== CNAME

=== DNAME

